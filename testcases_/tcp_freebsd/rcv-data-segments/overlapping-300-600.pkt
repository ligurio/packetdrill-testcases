// SPDX-License-Identifier: BSD-2-Clause
// Copyright (c) 2016, Michael TÃ¼xen
// Source: https://github.com/freebsd-net/tcp-testsuite
//
// Copyright (c) 2018 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

--ip_version=ipv4
--tolerance_usecs=10000

// Ensure that all relevant sysctl variables have their default variables.
 0.00 `sysctl -w net.inet.tcp.sack.enable=1`
// Flush host cache.
+0.00 `sysctl -w net.inet.tcp.hostcache.purgenow=1`
// Create a listening TCP socket
+0.00 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.00 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0.00 bind(3, ..., ...) = 0
+0.00 listen(3, 1) = 0
// Establish the connection
+0.00 < S   0:0(0) win 65535 <mss 1460,sackOK,eol,eol>
+0.00 > S.  0:0(0) ack 1 win 65535 <mss 1460,sackOK,eol,eol>
+0.01 <  .  1:1(0) ack 1 win 65535
+0.00 accept(3, ..., ...) = 4
+0.00 close(3) = 0
// Prepare receiver.
+0.00 <  .   1:100(99)  ack   1 win 65535
+0.00 recv(4, ..., 1024, MSG_PEEK) = 99
+0.00 <  . 200:300(100) ack   1 win 65535
+0.00 >  .   1:1(0)     ack 100 win 65535 <nop,nop,sack 200:300>
+0.00 recv(4, ..., 1024, MSG_PEEK) = 99
+0.00 <  . 400:500(100) ack   1 win 65535
+0.00 >  .   1:1(0)     ack 100 win 65535 <nop,nop,sack 400:500 200:300>
+0.00 recv(4, ..., 1024, MSG_PEEK) = 99
+0.00 <  . 600:700(100) ack   1 win 65535
+0.00 >  .   1:1(0)     ack 100 win 65535 <nop,nop,sack 600:700 400:500 200:300>
+0.00 recv(4, ..., 1024, MSG_PEEK) = 99
// Inject overlapping segment
+0.00 <  . 300:600(300) ack   1 win 65535
+0.00 >  .   1:1(0)     ack 100 win 65535 <nop,nop,sack 400:500 200:700>
+0.00 recv(4, ..., 1024, MSG_PEEK) = 99
// Finish
+0.00 <  .   1:800(799) ack   1 win 65535
+0.00 >  .   1:1(0)     ack 800 win 64901 <nop,nop,sack 1:100>
+0.00 recv(4, ..., 1024, 0) = 799
// Teardown the connection
+0.10 < F. 800:800(0)   ack   1 win 65535
+0.00 >  .   1:1(0)     ack 801 win 65535
+0.00 recv(4, ..., 1024, 0) = 0 
+0.00 close(4) = 0
+0.00 > F.   1:1(0)     ack 801 win 65535
+0.01 <  . 801:801(0)   ack   2 win 65535
