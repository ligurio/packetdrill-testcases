// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) 2016, nplab
// Source: https://github.com/nplab/PR_SCTP_Testsuite
//
// Copyright (c) 2016 Julian Cordes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

--tolerance_usecs=250000
#ifdef FreeBSD
// only enable PR-SCTP extension on FreeBSD
 0.0 `sysctl -i net.inet.sctp.ecn_enable=0`
+0.0 `sysctl -i net.inet.sctp.pr_enable=1`
+0.0 `sysctl -i net.inet.sctp.asconf_enable=0`
+0.0 `sysctl -i net.inet.sctp.pktdrop_enable=0`
+0.0 `sysctl -i net.inet.sctp.reconfig_enable=0`
+0.0 `sysctl -i net.inet.sctp.auth_enable=0`    // FreeBSD 11 and higher
+0.0 `sysctl -i net.inet.sctp.auth_disable=1`   // FreeBSD 9.x and 10.x
+0.0 `sysctl -i net.inet.sctp.nrsack_enable=0`  // FreeBSD 11 and higher
+0.0 `sysctl -i net.inet.sctp.nrsack_on_off=0`  // FreeBSD 9.x and 10.x
+0.0 `sysctl -i net.inet.sctp.initial_cwnd=1`
#endif

+0.0 socket(..., SOCK_STREAM, IPPROTO_SCTP) = 3
+0.0 fcntl(3, F_GETFL) = 0x2 (flags O_RDWR)
+0.0 fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_FRAGMENT_INTERLEAVE, [2], 4) = 0
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_INTERLEAVING_SUPPORTED, {assoc_value=1}, 8) = 0
+0.0 bind(3, ..., ...) = 0
+0.1 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.0 > sctp: INIT[flgs=0, tag=1, a_rwnd=..., os=..., is=..., tsn=1, FORWARD_TSN_SUPPORTED[], 
                                             SUPPORTED_EXTENSIONS[types=[FORWARD_TSN, I_FORWARD_TSN, I_DATA]], 
                                             SUPPORTED_ADDRESS_TYPES[types=[IPv4]]]
+0.1 < sctp: INIT_ACK[flgs=0, tag=2, a_rwnd=15000, os=16, is=16, tsn=1, STATE_COOKIE[len=4, val=...],
                                             FORWARD_TSN_SUPPORTED[],
                                             SUPPORTED_EXTENSIONS[types=[FORWARD_TSN, I_FORWARD_TSN, I_DATA]]]
+0.0 > sctp: COOKIE_ECHO[flgs=0, len=4, val=...]
+0.1 < sctp: COOKIE_ACK[flgs=0]
+0.0 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
// Turn off the sending of HEARTBEATs.
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_PEER_ADDR_PARAMS, {spp_address=..., spp_hbinterval=0, spp_pathmaxrxt=0, spp_pathmtu=0, spp_flags=SPP_HB_DISABLE|SPP_PMTUD_DISABLE, spp_ipv6_flowlabel=0, spp_dscp=0}, 152) = 0
//sctp_sendmsg(int sd, const void * msg, size_t len, struct sockaddr *to, socklen_t tolen,
//             uint32_t ppid, uint32_t flags, uint16_t stream_no, uint32_t timetolive, uint32_t context);
+0.0 sctp_sendmsg(3, ..., 3000, ..., ..., htonl(1234), 0, 1, 500, 0) = 3000
// send some data and dont sack it, to see if FORWARD_TSN is sent
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=1, sid=1, mid=0, ppid=1234]
+0.1 < sctp: SACK[flgs=0, cum_tsn=1, a_rwnd=10000, gaps=[], dups=[]]
+0.0 > sctp: I_DATA[flgs=0, len=1468, tsn=2, sid=1, mid=0, fsn=1]
+0.0 > sctp: I_DATA[flgs=E, len=124, tsn=3, sid=1, mid=0, fsn=2]
+0.1 < sctp: SACK[flgs=0, cum_tsn=1, a_rwnd=10000, gaps=[2:2], dups=[]]
+0.8 > sctp: I_FORWARD_TSN[cum_tsn=3, ids=[{1,0,0}, {1,0,0}]]
+0.1 < sctp: SACK[flgs=0, cum_tsn=3, a_rwnd=10000, gaps=[], dups=[]]
// check if the cwnd at the IUT did not advance and is 2...
+0.0 sctp_sendmsg(3, ..., 3000, ..., ..., htonl(1234), 0, 1, 500, 0) = 3000
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=4, sid=1, mid=1, ppid=1234]
+0.0 > sctp: I_DATA[flgs=0, len=1468, tsn=5, sid=1, mid=1, fsn=1]
+0.1 < sctp: SACK[flgs=0, cum_tsn=5, a_rwnd=10000, gaps=[], dups=[]]
+0.0 > sctp: I_DATA[flgs=E, len=124, tsn=6, sid=1, mid=1, fsn=2]
+0.1 < sctp: SACK[flgs=0, cum_tsn=6, a_rwnd=10000, gaps=[], dups=[]]
+1.0 close(3) = 0
+0.0 > sctp: SHUTDOWN[flgs=0, cum_tsn=0]
+0.1 < sctp: SHUTDOWN_ACK[flgs=0]
+0.0 > sctp: SHUTDOWN_COMPLETE[flgs=0]

#ifdef FreeBSD
+0.0 `sysctl -i net.inet.sctp.initial_cwnd=3`
#endif
