// Source: https://github.com/nplab/packetdrill
+0.0 socket(..., SOCK_STREAM, IPPROTO_SCTP) = 3
// Check the handshake with en empty(!) cookie
+0.0 bind(3, ..., ...) = 0
+0.0 listen(3, 1) = 0
+0.0 < sctp(tag=0): INIT[flgs=0, tag=1, a_rwnd=1500, os=1, is=1, tsn=0]
+0.0 > sctp: INIT_ACK[flgs=0, tag=2, a_rwnd=..., os=..., is=..., tsn=10, ...]
+0.1 < sctp(tag=2): COOKIE_ECHO[flgs=0, len=..., val=...]
+0.0 > sctp: COOKIE_ACK[flgs=0]
+0.0 accept(3, ..., ...) = 4
+0.0 close(3) = 0
+0.1 < sctp(tag=2): SHUTDOWN_COMPLETE[flgs=0]
+0.1 < sctp(tag=1): SHUTDOWN_COMPLETE[flgs=T]
+0.1 < sctp(tag=2): ABORT[flgs=0]
+0.1 < sctp(tag=1): ABORT[flgs=T]
//Send some data.
//+1.0 write(4, ..., 1000) = 1000
//+0.0 > sctp: DATA[flgs=BE, len=1016, tsn=10, sid=0, ssn=0, ppid=0]
//+0.1 < sctp: SACK[flgs=0, cum_tsn=10, a_rwnd=1500, gaps=[], dups=[]]
//Receive some data
//+1.0 < sctp: DATA[flgs=BE, len=1016, tsn=1, sid=0, ssn=1, ppid=0]
//+0.0 read(4, ..., 2000) = 1000
//+0.2 > sctp: SACK[flgs=0, cum_tsn=1, a_rwnd=..., gaps=[], dups=[]]
//Receive more data, observe delayed SACKi
//+1.0 < sctp: DATA[flgs=BE, len=1016, tsn=2, sid=0, ssn=2, ppid=0]
//+0.0 read(4, ..., 2000) = 1000
//+0.2 > sctp: SACK[flgs=0, cum_tsn=2, a_rwnd=..., gaps=[], dups=[]]
//Tear down the association
//+1.0 < sctp: SHUTDOWN[flgs=0, cum_tsn=10]
//+0.0 > sctp: SHUTDOWN_ACK[flgs=0]
//+0.0 < sctp: SHUTDOWN_COMPLETE[flgs=0]
+0.0 close(4) = 0
