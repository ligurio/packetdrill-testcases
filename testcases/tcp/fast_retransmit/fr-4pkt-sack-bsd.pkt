// SPDX-License-Identifier: MIT
// Copyright (c) 2016 Shivansh Rai
// Source: https://github.com/freebsd-net/TCP-IP-Regression-TestSuite
// Test fast retransmit with 4 packets outstanding, receiver sending multiple SACKs.
// In this variant the receiver supports SACK.
// Borrowed from https://github.com/google/packetdrill
--tolerance_usecs=100000

// TODO~ Check if relevant sysctl exists for fast retransmit.

// Establish a connection.
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
0.000 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0

0.000 bind(3, ..., ...) = 0
0.000 listen(3, 1) = 0
0.000 < S 0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
0.000 > S. 0:0(0) ack 1 <...>
0.100 < . 1:1(0) ack 1 win 257
0.100  accept(3, ..., ...) = 4

0.100 write(4, ..., 1000) = 1000
0.100 > P. 1:1001(1000) ack 1

0.200 < . 1:1(0) ack 1001 win 257

// We write 4 data segments.
0.200 write(4, ..., 4000) = 4000
0.200 > .  1001:2001(1000) ack 1
0.200 > .  2001:3001(1000) ack 1
0.200 > .  3001:4001(1000) ack 1
0.200 > P. 4001:5001(1000) ack 1

// Lost segment 1001:2001.
// Receiver sends 3 SACKs.
0.300 < . 1:1(0) ack 1001 win 257 <sack 2001:3001,nop,nop>
0.300 < . 1:1(0) ack 1001 win 257 <sack 2001:4001,nop,nop>
0.300 < . 1:1(0) ack 1001 win 257 <sack 2001:5001,nop,nop>

// We've received 3 duplicate ACKs, so we do a fast retransmit
// for the missing segment.
0.300 > . 1001:2001(1000) ack 1

// Receiver ACKs all data.
0.300 < . 1:1(0) ack 5001 win 257
