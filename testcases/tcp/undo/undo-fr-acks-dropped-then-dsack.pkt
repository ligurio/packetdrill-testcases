// SPDX-License-Identifier: MIT
// Copyright (c) 2016 Shivansh Rai
// Source: https://github.com/freebsd-net/TCP-IP-Regression-TestSuite
// Borrowed from https://github.com/google/packetdrill
// Test fast recovery and undo: send 10 MSS, get 3 dupacks, do a
// fast retransmit, get a DSACK for the retransmitted segment, and
// undo the cwnd reduction.
// Assumes initial cwnd is 10. Receiver supports SACK.
--tolerance_usecs=100000

// In this variant the original ACKs are lost, and all the sender gets is
// a DSACK.

// Establish a connection.
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
0.000 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
0.000 bind(3, ..., ...) = 0
0.000 listen(3, 1) = 0

0.100 < S  0:0(0) win 32792 <mss 1000,sackOK,nop,nop,nop,wscale 7>
0.100 > S. 0:0(0) ack 1 <...>
0.200 < .  1:1(0) ack 1 win 257
0.200 accept(3, ..., ...) = 4

// We write 10 data segments.
0.200 write(4, ..., 10000) = 10000
0.200 > .     1:1001 (1000) ack 1 <...>
0.200 > .  1001:2001 (1000) ack 1 <...>
0.200 > .  2001:3001 (1000) ack 1 <...>
0.200 > .  3001:4001 (1000) ack 1 <...>
0.200 > .  4001:5001 (1000) ack 1 <...>
0.200 > .  5001:6001 (1000) ack 1 <...>
0.200 > .  6001:7001 (1000) ack 1 <...>
0.200 > .  7001:8001 (1000) ack 1 <...>
0.200 > .  8001:9001 (1000) ack 1 <...>
0.200 > P. 9001:10001(1000) ack 1 <...>

// Client sends 3 dupacks.
0.300 < . 1:1(0) ack 1 win 257 <sack 1001:2001,nop,nop>
0.300 < . 1:1(0) ack 1 win 257 <sack 1001:3001,nop,nop>
0.300 < . 1:1(0) ack 1 win 257 <sack 1001:4001,nop,nop>
// We've received 3 duplicate ACKs, so we do a fast retransmit.
0.300 > . 1:1001(1000) ack 1

/* 0.300 %{ assert tcpi_snd_cwnd == 7 }% */

// Apparently just reordering. Retransmit was spurious.
// Original ACKs for sequence ranges up to 10001 are all lost.

// Receiver sends DSACK for retransmitted packet.
0.400 < . 1:1(0) ack 10001 win 257 <sack 1:1001,nop,nop>

// Verify that the DSACK caused an undo, restoring cwnd to 10.
0.400 write(4, ..., 1000) = 1000
0.400 > P.  10001:11001(1000)  ack 1 win 1031 <...>

/* 0.400 %{ assert tcpi_snd_cwnd == 10 }% */

// Apparently, the value of tcpi_snd_cwnd is always 1000.
